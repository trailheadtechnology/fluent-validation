// Licence file C:\Users\jtower\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Fluent_Validation.Config;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Storage;
using System.Collections;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Configuration;
using System.Data;
using System.Data.SqlTypes;
using System.Linq.Expressions;
using System.Reflection;

namespace Fluent_Validation.Data
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<SalesLT_Address> SalesLT_Addresses { get; set; } // Address
        DbSet<SalesLT_Customer> SalesLT_Customers { get; set; } // Customer
        DbSet<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress
        DbSet<SalesLT_Product> SalesLT_Products { get; set; } // Product
        DbSet<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory
        DbSet<SalesLT_ProductDescription> SalesLT_ProductDescriptions { get; set; } // ProductDescription
        DbSet<SalesLT_ProductModel> SalesLT_ProductModels { get; set; } // ProductModel
        DbSet<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        DbSet<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail
        DbSet<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Stored Procedures
        int UspLogError(out int? errorLogId);
        // UspLogErrorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UspPrintError();
        // UspPrintErrorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        private readonly IConfiguration _config;

        public MyDbContext(IConfiguration configuration)
        {
            _config = configuration;
        }

        public MyDbContext(DbContextOptions<MyDbContext> options, IConfiguration configuration)
            : base(options)
        {
            _config = configuration;
        }

        public DbSet<SalesLT_Address> SalesLT_Addresses { get; set; } // Address
        public DbSet<SalesLT_Customer> SalesLT_Customers { get; set; } // Customer
        public DbSet<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress
        public DbSet<SalesLT_Product> SalesLT_Products { get; set; } // Product
        public DbSet<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory
        public DbSet<SalesLT_ProductDescription> SalesLT_ProductDescriptions { get; set; } // ProductDescription
        public DbSet<SalesLT_ProductModel> SalesLT_ProductModels { get; set; } // ProductModel
        public DbSet<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        public DbSet<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail
        public DbSet<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                var conStr = _config.GetSection("data").Get<DataConfig>().connectionString;
                optionsBuilder.UseSqlServer(conStr);
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new SalesLT_AddressConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_CustomerAddressConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductDescriptionConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductModelConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_ProductModelProductDescriptionConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_SalesOrderDetailConfiguration());
            modelBuilder.ApplyConfiguration(new SalesLT_SalesOrderHeaderConfiguration());

        }


        // Stored Procedures
        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[uspLogError] @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);

            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;

            return (int)procResultParam.Value;
        }

        // UspLogErrorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int UspPrintError()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[uspPrintError] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // UspPrintErrorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    //public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    //{
    //    public MyDbContext CreateDbContext(string[] args)
    //    {
    //        return new MyDbContext();
    //    }
    //}

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<SalesLT_Address> SalesLT_Addresses { get; set; } // Address
        public DbSet<SalesLT_Customer> SalesLT_Customers { get; set; } // Customer
        public DbSet<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress
        public DbSet<SalesLT_Product> SalesLT_Products { get; set; } // Product
        public DbSet<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory
        public DbSet<SalesLT_ProductDescription> SalesLT_ProductDescriptions { get; set; } // ProductDescription
        public DbSet<SalesLT_ProductModel> SalesLT_ProductModels { get; set; } // ProductModel
        public DbSet<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        public DbSet<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail
        public DbSet<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader

        //public FakeMyDbContext()
        //{
        //    _database = new FakeDatabaseFacade(new MyDbContext());

        //    SalesLT_Addresses = new FakeDbSet<SalesLT_Address>("AddressId");
        //    SalesLT_Customers = new FakeDbSet<SalesLT_Customer>("CustomerId");
        //    SalesLT_CustomerAddresses = new FakeDbSet<SalesLT_CustomerAddress>("CustomerId", "AddressId");
        //    SalesLT_Products = new FakeDbSet<SalesLT_Product>("ProductId");
        //    SalesLT_ProductCategories = new FakeDbSet<SalesLT_ProductCategory>("ProductCategoryId");
        //    SalesLT_ProductDescriptions = new FakeDbSet<SalesLT_ProductDescription>("ProductDescriptionId");
        //    SalesLT_ProductModels = new FakeDbSet<SalesLT_ProductModel>("ProductModelId");
        //    SalesLT_ProductModelProductDescriptions = new FakeDbSet<SalesLT_ProductModelProductDescription>("ProductModelId", "ProductDescriptionId", "Culture");
        //    SalesLT_SalesOrderDetails = new FakeDbSet<SalesLT_SalesOrderDetail>("SalesOrderId", "SalesOrderDetailId");
        //    SalesLT_SalesOrderHeaders = new FakeDbSet<SalesLT_SalesOrderHeader>("SalesOrderId");

        //}

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }


        // Stored Procedures

        public int UspLogError(out int? errorLogId)
        {
            errorLogId = default(int);
            return 0;
        }

        // UspLogErrorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int UspPrintError()
        {
            return 0;
        }

        // UspPrintErrorAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Address
    /// <summary>
    /// Street address information for customers.
    /// </summary>
    public class SalesLT_Address
    {
        /// <summary>
        /// Primary key for Address records.
        /// </summary>
        public int AddressId { get; set; } // AddressID (Primary key)

        /// <summary>
        /// First street address line.
        /// </summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)

        /// <summary>
        /// Second street address line.
        /// </summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        /// <summary>
        /// Name of the city.
        /// </summary>
        public string City { get; set; } // City (length: 30)

        /// <summary>
        /// Name of state or province.
        /// </summary>
        public string StateProvince { get; set; } // StateProvince (length: 50)
        public string CountryRegion { get; set; } // CountryRegion (length: 50)

        /// <summary>
        /// Postal code for the street address.
        /// </summary>
        public string PostalCode { get; set; } // PostalCode (length: 15)

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_CustomerAddresses where [CustomerAddress].[AddressID] point to this entity (FK_CustomerAddress_Address_AddressID)
        /// </summary>
        public virtual ICollection<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress.FK_CustomerAddress_Address_AddressID

        /// <summary>
        /// Child SalesLT_SalesOrderHeaders where [SalesOrderHeader].[BillToAddressID] point to this entity (FK_SalesOrderHeader_Address_BillTo_AddressID)
        /// </summary>
        public virtual ICollection<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders_BillToAddressId { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_BillTo_AddressID

        /// <summary>
        /// Child SalesLT_SalesOrderHeaders where [SalesOrderHeader].[ShipToAddressID] point to this entity (FK_SalesOrderHeader_Address_ShipTo_AddressID)
        /// </summary>
        public virtual ICollection<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders_ShipToAddressId { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_ShipTo_AddressID

        public SalesLT_Address()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
            SalesLT_CustomerAddresses = new List<SalesLT_CustomerAddress>();
            SalesLT_SalesOrderHeaders_BillToAddressId = new List<SalesLT_SalesOrderHeader>();
            SalesLT_SalesOrderHeaders_ShipToAddressId = new List<SalesLT_SalesOrderHeader>();
        }
    }

    // Customer
    /// <summary>
    /// Customer information.
    /// </summary>
    public class SalesLT_Customer
    {
        /// <summary>
        /// Primary key for Customer records.
        /// </summary>
        public int CustomerId { get; set; } // CustomerID (Primary key)

        /// <summary>
        /// 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        /// </summary>
        public bool NameStyle { get; set; } // NameStyle

        /// <summary>
        /// A courtesy title. For example, Mr. or Ms.
        /// </summary>
        public string Title { get; set; } // Title (length: 8)

        /// <summary>
        /// First name of the person.
        /// </summary>
        public string FirstName { get; set; } // FirstName (length: 50)

        /// <summary>
        /// Middle name or middle initial of the person.
        /// </summary>
        public string MiddleName { get; set; } // MiddleName (length: 50)

        /// <summary>
        /// Last name of the person.
        /// </summary>
        public string LastName { get; set; } // LastName (length: 50)

        /// <summary>
        /// Surname suffix. For example, Sr. or Jr.
        /// </summary>
        public string Suffix { get; set; } // Suffix (length: 10)

        /// <summary>
        /// The customer&apos;s organization.
        /// </summary>
        public string CompanyName { get; set; } // CompanyName (length: 128)

        /// <summary>
        /// The customer&apos;s sales person, an employee of AdventureWorks Cycles.
        /// </summary>
        public string SalesPerson { get; set; } // SalesPerson (length: 256)

        /// <summary>
        /// E-mail address for the person.
        /// </summary>
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        /// <summary>
        /// Phone number associated with the person.
        /// </summary>
        public string Phone { get; set; } // Phone (length: 25)

        /// <summary>
        /// Password for the e-mail account.
        /// </summary>
        public string PasswordHash { get; set; } // PasswordHash (length: 128)

        /// <summary>
        /// Random value concatenated with the password string before the password is hashed.
        /// </summary>
        public string PasswordSalt { get; set; } // PasswordSalt (length: 10)

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate
        public int? Age { get; set; } // Age
        public decimal AnnualRevenue { get; set; } // AnnualRevenue

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_CustomerAddresses where [CustomerAddress].[CustomerID] point to this entity (FK_CustomerAddress_Customer_CustomerID)
        /// </summary>
        public virtual ICollection<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress.FK_CustomerAddress_Customer_CustomerID

        /// <summary>
        /// Child SalesLT_SalesOrderHeaders where [SalesOrderHeader].[CustomerID] point to this entity (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        public virtual ICollection<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID

        public SalesLT_Customer()
        {
            NameStyle = false;
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
            AnnualRevenue = 0m;
            SalesLT_CustomerAddresses = new List<SalesLT_CustomerAddress>();
            SalesLT_SalesOrderHeaders = new List<SalesLT_SalesOrderHeader>();
        }
    }

    // CustomerAddress
    /// <summary>
    /// Cross-reference table mapping customers to their address(es).
    /// </summary>
    public class SalesLT_CustomerAddress
    {
        /// <summary>
        /// Primary key. Foreign key to Customer.CustomerID.
        /// </summary>
        public int CustomerId { get; set; } // CustomerID (Primary key)

        /// <summary>
        /// Primary key. Foreign key to Address.AddressID.
        /// </summary>
        public int AddressId { get; set; } // AddressID (Primary key)

        /// <summary>
        /// The kind of Address. One of: Archive, Billing, Home, Main Office, Primary, Shipping
        /// </summary>
        public string AddressType { get; set; } // AddressType (length: 50)

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_Address pointed by [CustomerAddress].([AddressId]) (FK_CustomerAddress_Address_AddressID)
        /// </summary>
        public virtual SalesLT_Address SalesLT_Address { get; set; } // FK_CustomerAddress_Address_AddressID

        /// <summary>
        /// Parent SalesLT_Customer pointed by [CustomerAddress].([CustomerId]) (FK_CustomerAddress_Customer_CustomerID)
        /// </summary>
        public virtual SalesLT_Customer SalesLT_Customer { get; set; } // FK_CustomerAddress_Customer_CustomerID

        public SalesLT_CustomerAddress()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
        }
    }

    // Product
    /// <summary>
    /// Products sold or used in the manfacturing of sold products.
    /// </summary>
    public class SalesLT_Product
    {
        /// <summary>
        /// Primary key for Product records.
        /// </summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        /// <summary>
        /// Name of the product.
        /// </summary>
        public string Name { get; set; } // Name (length: 50)

        /// <summary>
        /// Unique product identification number.
        /// </summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 25)

        /// <summary>
        /// Product color.
        /// </summary>
        public string Color { get; set; } // Color (length: 15)

        /// <summary>
        /// Standard cost of the product.
        /// </summary>
        public decimal StandardCost { get; set; } // StandardCost

        /// <summary>
        /// Selling price.
        /// </summary>
        public decimal ListPrice { get; set; } // ListPrice

        /// <summary>
        /// Product size.
        /// </summary>
        public string Size { get; set; } // Size (length: 5)

        /// <summary>
        /// Product weight.
        /// </summary>
        //[Range(0, double.MaxValue, ErrorMessage = "Weight cannot be negative")]
        public decimal? Weight { get; set; } // Weight

        /// <summary>
        /// Product is a member of this product category. Foreign key to ProductCategory.ProductCategoryID.
        /// </summary>
        public int? ProductCategoryId { get; set; } // ProductCategoryID

        /// <summary>
        /// Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
        /// </summary>
        public int? ProductModelId { get; set; } // ProductModelID

        /// <summary>
        /// Date the product was available for sale.
        /// </summary>
        public DateTime SellStartDate { get; set; } // SellStartDate

        /// <summary>
        /// Date the product was no longer available for sale.
        /// </summary>
        public DateTime? SellEndDate { get; set; } // SellEndDate

        /// <summary>
        /// Date the product was discontinued.
        /// </summary>
        public DateTime? DiscontinuedDate { get; set; } // DiscontinuedDate

        /// <summary>
        /// Small image of the product.
        /// </summary>
        public byte[] ThumbNailPhoto { get; set; } // ThumbNailPhoto

        /// <summary>
        /// Small image file name.
        /// </summary>
        public string ThumbnailPhotoFileName { get; set; } // ThumbnailPhotoFileName (length: 50)

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate
        public int? QtyOnHand { get; set; } // QtyOnHand

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_SalesOrderDetails where [SalesOrderDetail].[ProductID] point to this entity (FK_SalesOrderDetail_Product_ProductID)
        /// </summary>
        public virtual ICollection<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_Product_ProductID

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_ProductCategory pointed by [Product].([ProductCategoryId]) (FK_Product_ProductCategory_ProductCategoryID)
        /// </summary>
        public virtual SalesLT_ProductCategory SalesLT_ProductCategory { get; set; } // FK_Product_ProductCategory_ProductCategoryID

        /// <summary>
        /// Parent SalesLT_ProductModel pointed by [Product].([ProductModelId]) (FK_Product_ProductModel_ProductModelID)
        /// </summary>
        public virtual SalesLT_ProductModel SalesLT_ProductModel { get; set; } // FK_Product_ProductModel_ProductModelID

        public SalesLT_Product()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
            SalesLT_SalesOrderDetails = new List<SalesLT_SalesOrderDetail>();
        }
    }

    // ProductCategory
    /// <summary>
    /// High-level product categorization.
    /// </summary>
    public class SalesLT_ProductCategory
    {
        /// <summary>
        /// Primary key for ProductCategory records.
        /// </summary>
        public int ProductCategoryId { get; set; } // ProductCategoryID (Primary key)

        /// <summary>
        /// Product category identification number of immediate ancestor category. Foreign key to ProductCategory.ProductCategoryID.
        /// </summary>
        public int? ParentProductCategoryId { get; set; } // ParentProductCategoryID

        /// <summary>
        /// Category description.
        /// </summary>
        public string Name { get; set; } // Name (length: 50)

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_Products where [Product].[ProductCategoryID] point to this entity (FK_Product_ProductCategory_ProductCategoryID)
        /// </summary>
        public virtual ICollection<SalesLT_Product> SalesLT_Products { get; set; } // Product.FK_Product_ProductCategory_ProductCategoryID

        /// <summary>
        /// Child SalesLT_ProductCategories where [ProductCategory].[ParentProductCategoryID] point to this entity (FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID)
        /// </summary>
        public virtual ICollection<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory.FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_ProductCategory pointed by [ProductCategory].([ParentProductCategoryId]) (FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID)
        /// </summary>
        public virtual SalesLT_ProductCategory ParentProductCategory { get; set; } // FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID

        public SalesLT_ProductCategory()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
            SalesLT_Products = new List<SalesLT_Product>();
            SalesLT_ProductCategories = new List<SalesLT_ProductCategory>();
        }
    }

    // ProductDescription
    /// <summary>
    /// Product descriptions in several languages.
    /// </summary>
    public class SalesLT_ProductDescription
    {
        /// <summary>
        /// Primary key for ProductDescription records.
        /// </summary>
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key)

        /// <summary>
        /// Description of the product.
        /// </summary>
        public string Description { get; set; } // Description (length: 400)

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_ProductModelProductDescriptions where [ProductModelProductDescription].[ProductDescriptionID] point to this entity (FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID)
        /// </summary>
        public virtual ICollection<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription.FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID

        public SalesLT_ProductDescription()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
            SalesLT_ProductModelProductDescriptions = new List<SalesLT_ProductModelProductDescription>();
        }
    }

    // ProductModel
    public class SalesLT_ProductModel
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string CatalogDescription { get; set; } // CatalogDescription
        public Guid Rowguid { get; set; } // rowguid
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_Products where [Product].[ProductModelID] point to this entity (FK_Product_ProductModel_ProductModelID)
        /// </summary>
        public virtual ICollection<SalesLT_Product> SalesLT_Products { get; set; } // Product.FK_Product_ProductModel_ProductModelID

        /// <summary>
        /// Child SalesLT_ProductModelProductDescriptions where [ProductModelProductDescription].[ProductModelID] point to this entity (FK_ProductModelProductDescription_ProductModel_ProductModelID)
        /// </summary>
        public virtual ICollection<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription.FK_ProductModelProductDescription_ProductModel_ProductModelID

        public SalesLT_ProductModel()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
            SalesLT_Products = new List<SalesLT_Product>();
            SalesLT_ProductModelProductDescriptions = new List<SalesLT_ProductModelProductDescription>();
        }
    }

    // ProductModelProductDescription
    /// <summary>
    /// Cross-reference table mapping product descriptions and the language the description is written in.
    /// </summary>
    public class SalesLT_ProductModelProductDescription
    {
        /// <summary>
        /// Primary key. Foreign key to ProductModel.ProductModelID.
        /// </summary>
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        /// <summary>
        /// Primary key. Foreign key to ProductDescription.ProductDescriptionID.
        /// </summary>
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key)

        /// <summary>
        /// The culture for which the description is written
        /// </summary>
        public string Culture { get; set; } // Culture (Primary key) (length: 6)
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_ProductDescription pointed by [ProductModelProductDescription].([ProductDescriptionId]) (FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID)
        /// </summary>
        public virtual SalesLT_ProductDescription SalesLT_ProductDescription { get; set; } // FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID

        /// <summary>
        /// Parent SalesLT_ProductModel pointed by [ProductModelProductDescription].([ProductModelId]) (FK_ProductModelProductDescription_ProductModel_ProductModelID)
        /// </summary>
        public virtual SalesLT_ProductModel SalesLT_ProductModel { get; set; } // FK_ProductModelProductDescription_ProductModel_ProductModelID

        public SalesLT_ProductModelProductDescription()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
        }
    }

    // SalesOrderDetail
    /// <summary>
    /// Individual products associated with a specific sales order. See SalesOrderHeader.
    /// </summary>
    public class SalesLT_SalesOrderDetail
    {
        /// <summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        /// </summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        /// <summary>
        /// Primary key. One incremental unique number per product sold.
        /// </summary>
        public int SalesOrderDetailId { get; set; } // SalesOrderDetailID (Primary key)

        /// <summary>
        /// Quantity ordered per product.
        /// </summary>
        public short OrderQty { get; set; } // OrderQty

        /// <summary>
        /// Product sold to customer. Foreign key to Product.ProductID.
        /// </summary>
        public int ProductId { get; set; } // ProductID

        /// <summary>
        /// Selling price of a single product.
        /// </summary>
        public decimal UnitPrice { get; set; } // UnitPrice

        /// <summary>
        /// Discount amount.
        /// </summary>
        public decimal UnitPriceDiscount { get; set; } // UnitPriceDiscount

        /// <summary>
        /// Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.
        /// </summary>
        public decimal LineTotal { get; private set; } // LineTotal

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_Product pointed by [SalesOrderDetail].([ProductId]) (FK_SalesOrderDetail_Product_ProductID)
        /// </summary>
        public virtual SalesLT_Product SalesLT_Product { get; set; } // FK_SalesOrderDetail_Product_ProductID

        /// <summary>
        /// Parent SalesLT_SalesOrderHeader pointed by [SalesOrderDetail].([SalesOrderId]) (FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID)
        /// </summary>
        public virtual SalesLT_SalesOrderHeader SalesLT_SalesOrderHeader { get; set; } // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID

        public SalesLT_SalesOrderDetail()
        {
            UnitPriceDiscount = 0.0m;
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
        }
    }

    // SalesOrderHeader
    /// <summary>
    /// General sales order information.
    /// </summary>
    public class SalesLT_SalesOrderHeader
    {
        /// <summary>
        /// Primary key.
        /// </summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        /// <summary>
        /// Incremental number to track changes to the sales order over time.
        /// </summary>
        public byte RevisionNumber { get; set; } // RevisionNumber

        /// <summary>
        /// Dates the sales order was created.
        /// </summary>
        public DateTime OrderDate { get; set; } // OrderDate

        /// <summary>
        /// Date the order is due to the customer.
        /// </summary>
        public DateTime DueDate { get; set; } // DueDate

        /// <summary>
        /// Date the order was shipped to the customer.
        /// </summary>
        public DateTime? ShipDate { get; set; } // ShipDate

        /// <summary>
        /// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        /// </summary>
        public byte Status { get; set; } // Status

        /// <summary>
        /// 0 = Order placed by sales person. 1 = Order placed online by customer.
        /// </summary>
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag

        /// <summary>
        /// Unique sales order identification number.
        /// </summary>
        public string SalesOrderNumber { get; private set; } // SalesOrderNumber (length: 25)

        /// <summary>
        /// Customer purchase order number reference.
        /// </summary>
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber (length: 25)

        /// <summary>
        /// Financial accounting number reference.
        /// </summary>
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        /// <summary>
        /// Customer identification number. Foreign key to Customer.CustomerID.
        /// </summary>
        public int CustomerId { get; set; } // CustomerID

        /// <summary>
        /// The ID of the location to send goods.  Foreign key to the Address table.
        /// </summary>
        public int? ShipToAddressId { get; set; } // ShipToAddressID

        /// <summary>
        /// The ID of the location to send invoices.  Foreign key to the Address table.
        /// </summary>
        public int? BillToAddressId { get; set; } // BillToAddressID

        /// <summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        /// </summary>
        public string ShipMethod { get; set; } // ShipMethod (length: 50)

        /// <summary>
        /// Approval code provided by the credit card company.
        /// </summary>
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode (length: 15)

        /// <summary>
        /// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        /// </summary>
        public decimal SubTotal { get; set; } // SubTotal

        /// <summary>
        /// Tax amount.
        /// </summary>
        public decimal TaxAmt { get; set; } // TaxAmt

        /// <summary>
        /// Shipping cost.
        /// </summary>
        public decimal Freight { get; set; } // Freight

        /// <summary>
        /// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        /// </summary>
        public decimal TotalDue { get; private set; } // TotalDue

        /// <summary>
        /// Sales representative comments.
        /// </summary>
        public string Comment { get; set; } // Comment

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_SalesOrderDetails where [SalesOrderDetail].[SalesOrderID] point to this entity (FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID)
        /// </summary>
        public virtual ICollection<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_Address pointed by [SalesOrderHeader].([BillToAddressId]) (FK_SalesOrderHeader_Address_BillTo_AddressID)
        /// </summary>
        public virtual SalesLT_Address BillToAddress { get; set; } // FK_SalesOrderHeader_Address_BillTo_AddressID

        /// <summary>
        /// Parent SalesLT_Address pointed by [SalesOrderHeader].([ShipToAddressId]) (FK_SalesOrderHeader_Address_ShipTo_AddressID)
        /// </summary>
        public virtual SalesLT_Address ShipToAddress { get; set; } // FK_SalesOrderHeader_Address_ShipTo_AddressID

        /// <summary>
        /// Parent SalesLT_Customer pointed by [SalesOrderHeader].([CustomerId]) (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        public virtual SalesLT_Customer SalesLT_Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID

        public SalesLT_SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
            SalesLT_SalesOrderDetails = new List<SalesLT_SalesOrderDetail>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Address
    public class SalesLT_AddressConfiguration : IEntityTypeConfiguration<SalesLT_Address>
    {
        public void Configure(EntityTypeBuilder<SalesLT_Address> builder)
        {
            builder.ToTable("Address", "SalesLT");
            builder.HasKey(x => x.AddressId).HasName("PK_Address_AddressID").IsClustered();

            builder.Property(x => x.AddressId).HasColumnName(@"AddressID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.StateProvince).HasColumnName(@"StateProvince").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CountryRegion).HasColumnName(@"CountryRegion").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_Address_rowguid").IsUnique();
            builder.HasIndex(x => new { x.AddressLine1, x.AddressLine2, x.City, x.StateProvince, x.PostalCode, x.CountryRegion }).HasDatabaseName("IX_Address_AddressLine1_AddressLine2_City_StateProvince_PostalCode_CountryRegion");
            builder.HasIndex(x => x.StateProvince).HasDatabaseName("IX_Address_StateProvince");
        }
    }

    // Customer
    public class SalesLT_CustomerConfiguration : IEntityTypeConfiguration<SalesLT_Customer>
    {
        public void Configure(EntityTypeBuilder<SalesLT_Customer> builder)
        {
            builder.ToTable("Customer", "SalesLT");
            builder.HasKey(x => x.CustomerId).HasName("PK_Customer_CustomerID").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NameStyle).HasColumnName(@"NameStyle").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.SalesPerson).HasColumnName(@"SalesPerson").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("varchar(128)").IsRequired().IsUnicode(false).HasMaxLength(128);
            builder.Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Age).HasColumnName(@"Age").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AnnualRevenue).HasColumnName(@"AnnualRevenue").HasColumnType("decimal(18,2)").HasPrecision(18,2).IsRequired();

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_Customer_rowguid").IsUnique();
            builder.HasIndex(x => x.EmailAddress).HasDatabaseName("IX_Customer_EmailAddress");
        }
    }

    // CustomerAddress
    public class SalesLT_CustomerAddressConfiguration : IEntityTypeConfiguration<SalesLT_CustomerAddress>
    {
        public void Configure(EntityTypeBuilder<SalesLT_CustomerAddress> builder)
        {
            builder.ToTable("CustomerAddress", "SalesLT");
            builder.HasKey(x => new { x.CustomerId, x.AddressId }).HasName("PK_CustomerAddress_CustomerID_AddressID").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AddressId).HasColumnName(@"AddressID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AddressType).HasColumnName(@"AddressType").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.SalesLT_Address).WithMany(b => b.SalesLT_CustomerAddresses).HasForeignKey(c => c.AddressId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerAddress_Address_AddressID");
            builder.HasOne(a => a.SalesLT_Customer).WithMany(b => b.SalesLT_CustomerAddresses).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerAddress_Customer_CustomerID");

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_CustomerAddress_rowguid").IsUnique();
        }
    }

    // Product
    public class SalesLT_ProductConfiguration : IEntityTypeConfiguration<SalesLT_Product>
    {
        public void Configure(EntityTypeBuilder<SalesLT_Product> builder)
        {
            builder.ToTable("Product", "SalesLT");
            builder.HasKey(x => x.ProductId).HasName("PK_Product_ProductID").IsClustered();

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(25)").IsRequired().HasMaxLength(25);
            builder.Property(x => x.Color).HasColumnName(@"Color").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.StandardCost).HasColumnName(@"StandardCost").HasColumnType("money").IsRequired();
            builder.Property(x => x.ListPrice).HasColumnName(@"ListPrice").HasColumnType("money").IsRequired();
            builder.Property(x => x.Size).HasColumnName(@"Size").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal(8,2)").HasPrecision(8,2).IsRequired(false);
            builder.Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SellStartDate).HasColumnName(@"SellStartDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.SellEndDate).HasColumnName(@"SellEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DiscontinuedDate).HasColumnName(@"DiscontinuedDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ThumbNailPhoto).HasColumnName(@"ThumbNailPhoto").HasColumnType("varbinary(max)").IsRequired(false);
            builder.Property(x => x.ThumbnailPhotoFileName).HasColumnName(@"ThumbnailPhotoFileName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.QtyOnHand).HasColumnName(@"QtyOnHand").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.SalesLT_ProductCategory).WithMany(b => b.SalesLT_Products).HasForeignKey(c => c.ProductCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Product_ProductCategory_ProductCategoryID");
            builder.HasOne(a => a.SalesLT_ProductModel).WithMany(b => b.SalesLT_Products).HasForeignKey(c => c.ProductModelId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Product_ProductModel_ProductModelID");

            builder.HasIndex(x => x.Name).HasDatabaseName("AK_Product_Name").IsUnique();
            builder.HasIndex(x => x.ProductNumber).HasDatabaseName("AK_Product_ProductNumber").IsUnique();
            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_Product_rowguid").IsUnique();
        }
    }

    // ProductCategory
    public class SalesLT_ProductCategoryConfiguration : IEntityTypeConfiguration<SalesLT_ProductCategory>
    {
        public void Configure(EntityTypeBuilder<SalesLT_ProductCategory> builder)
        {
            builder.ToTable("ProductCategory", "SalesLT");
            builder.HasKey(x => x.ProductCategoryId).HasName("PK_ProductCategory_ProductCategoryID").IsClustered();

            builder.Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ParentProductCategoryId).HasColumnName(@"ParentProductCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.ParentProductCategory).WithMany(b => b.SalesLT_ProductCategories).HasForeignKey(c => c.ParentProductCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID");

            builder.HasIndex(x => x.Name).HasDatabaseName("AK_ProductCategory_Name").IsUnique();
            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_ProductCategory_rowguid").IsUnique();
        }
    }

    // ProductDescription
    public class SalesLT_ProductDescriptionConfiguration : IEntityTypeConfiguration<SalesLT_ProductDescription>
    {
        public void Configure(EntityTypeBuilder<SalesLT_ProductDescription> builder)
        {
            builder.ToTable("ProductDescription", "SalesLT");
            builder.HasKey(x => x.ProductDescriptionId).HasName("PK_ProductDescription_ProductDescriptionID").IsClustered();

            builder.Property(x => x.ProductDescriptionId).HasColumnName(@"ProductDescriptionID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(400)").IsRequired().HasMaxLength(400);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_ProductDescription_rowguid").IsUnique();
        }
    }

    // ProductModel
    public class SalesLT_ProductModelConfiguration : IEntityTypeConfiguration<SalesLT_ProductModel>
    {
        public void Configure(EntityTypeBuilder<SalesLT_ProductModel> builder)
        {
            builder.ToTable("ProductModel", "SalesLT");
            builder.HasKey(x => x.ProductModelId).HasName("PK_ProductModel_ProductModelID").IsClustered();

            builder.Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CatalogDescription).HasColumnName(@"CatalogDescription").HasColumnType("xml").IsRequired(false);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            builder.HasIndex(x => x.Name).HasDatabaseName("AK_ProductModel_Name").IsUnique();
            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_ProductModel_rowguid").IsUnique();
        }
    }

    // ProductModelProductDescription
    public class SalesLT_ProductModelProductDescriptionConfiguration : IEntityTypeConfiguration<SalesLT_ProductModelProductDescription>
    {
        public void Configure(EntityTypeBuilder<SalesLT_ProductModelProductDescription> builder)
        {
            builder.ToTable("ProductModelProductDescription", "SalesLT");
            builder.HasKey(x => new { x.ProductModelId, x.ProductDescriptionId, x.Culture }).HasName("PK_ProductModelProductDescription_ProductModelID_ProductDescriptionID_Culture").IsClustered();

            builder.Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductDescriptionId).HasColumnName(@"ProductDescriptionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Culture).HasColumnName(@"Culture").HasColumnType("nchar(6)").IsRequired().IsFixedLength().HasMaxLength(6).ValueGeneratedNever();
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.SalesLT_ProductDescription).WithMany(b => b.SalesLT_ProductModelProductDescriptions).HasForeignKey(c => c.ProductDescriptionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID");
            builder.HasOne(a => a.SalesLT_ProductModel).WithMany(b => b.SalesLT_ProductModelProductDescriptions).HasForeignKey(c => c.ProductModelId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ProductModelProductDescription_ProductModel_ProductModelID");

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_ProductModelProductDescription_rowguid").IsUnique();
        }
    }

    // SalesOrderDetail
    public class SalesLT_SalesOrderDetailConfiguration : IEntityTypeConfiguration<SalesLT_SalesOrderDetail>
    {
        public void Configure(EntityTypeBuilder<SalesLT_SalesOrderDetail> builder)
        {
            builder.ToTable("SalesOrderDetail", "SalesLT");
            builder.HasKey(x => new { x.SalesOrderId, x.SalesOrderDetailId }).HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID").IsClustered();

            builder.Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SalesOrderDetailId).HasColumnName(@"SalesOrderDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderQty).HasColumnName(@"OrderQty").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("money").IsRequired();
            builder.Property(x => x.UnitPriceDiscount).HasColumnName(@"UnitPriceDiscount").HasColumnType("money").IsRequired();
            builder.Property(x => x.LineTotal).HasColumnName(@"LineTotal").HasColumnType("numeric(38,6)").HasPrecision(38,6).IsRequired().ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.SalesLT_Product).WithMany(b => b.SalesLT_SalesOrderDetails).HasForeignKey(c => c.ProductId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SalesOrderDetail_Product_ProductID");
            builder.HasOne(a => a.SalesLT_SalesOrderHeader).WithMany(b => b.SalesLT_SalesOrderDetails).HasForeignKey(c => c.SalesOrderId).HasConstraintName("FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID");

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_SalesOrderDetail_rowguid").IsUnique();
            builder.HasIndex(x => x.ProductId).HasDatabaseName("IX_SalesOrderDetail_ProductID");
        }
    }

    // SalesOrderHeader
    public class SalesLT_SalesOrderHeaderConfiguration : IEntityTypeConfiguration<SalesLT_SalesOrderHeader>
    {
        public void Configure(EntityTypeBuilder<SalesLT_SalesOrderHeader> builder)
        {
            builder.ToTable("SalesOrderHeader", "SalesLT");
            builder.HasKey(x => x.SalesOrderId).HasName("PK_SalesOrderHeader_SalesOrderID").IsClustered();

            builder.Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RevisionNumber).HasColumnName(@"RevisionNumber").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DueDate).HasColumnName(@"DueDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ShipDate).HasColumnName(@"ShipDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.OnlineOrderFlag).HasColumnName(@"OnlineOrderFlag").HasColumnType("bit").IsRequired();
            builder.Property(x => x.SalesOrderNumber).HasColumnName(@"SalesOrderNumber").HasColumnType("nvarchar(25)").IsRequired().HasMaxLength(25).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.PurchaseOrderNumber).HasColumnName(@"PurchaseOrderNumber").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ShipToAddressId).HasColumnName(@"ShipToAddressID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BillToAddressId).HasColumnName(@"BillToAddressID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ShipMethod).HasColumnName(@"ShipMethod").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CreditCardApprovalCode).HasColumnName(@"CreditCardApprovalCode").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.SubTotal).HasColumnName(@"SubTotal").HasColumnType("money").IsRequired();
            builder.Property(x => x.TaxAmt).HasColumnName(@"TaxAmt").HasColumnType("money").IsRequired();
            builder.Property(x => x.Freight).HasColumnName(@"Freight").HasColumnType("money").IsRequired();
            builder.Property(x => x.TotalDue).HasColumnName(@"TotalDue").HasColumnType("money").IsRequired().ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.BillToAddress).WithMany(b => b.SalesLT_SalesOrderHeaders_BillToAddressId).HasForeignKey(c => c.BillToAddressId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SalesOrderHeader_Address_BillTo_AddressID");
            builder.HasOne(a => a.SalesLT_Customer).WithMany(b => b.SalesLT_SalesOrderHeaders).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SalesOrderHeader_Customer_CustomerID");
            builder.HasOne(a => a.ShipToAddress).WithMany(b => b.SalesLT_SalesOrderHeaders_ShipToAddressId).HasForeignKey(c => c.ShipToAddressId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SalesOrderHeader_Address_ShipTo_AddressID");

            builder.HasIndex(x => x.Rowguid).HasDatabaseName("AK_SalesOrderHeader_rowguid").IsUnique();
            builder.HasIndex(x => x.SalesOrderNumber).HasDatabaseName("AK_SalesOrderHeader_SalesOrderNumber").IsUnique();
            builder.HasIndex(x => x.CustomerId).HasDatabaseName("IX_SalesOrderHeader_CustomerID");
        }
    }


    #endregion

    #region Stored procedure return models

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class UfnGetAllCategoriesReturnModel
    {
        public string ParentProductCategoryName { get; set; }
        public string ProductCategoryName { get; set; }
        public int ProductCategoryID { get; set; }
    }

    public class UfnGetCustomerInformationReturnModel
    {
        public int CustomerID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }


    #endregion

}
// </auto-generated>
